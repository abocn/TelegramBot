services:
  kowalski:
    build: .
    container_name: kowalski
    volumes:
      - ./telegram/props/lastfm.json:/usr/src/app/telegram/props/lastfm.json
    environment:
      - NODE_ENV=production
    env_file:
      - .env
    networks:
      - kowalski
    depends_on:
      - postgres
    restart: always
  postgres:
    image: postgres:17
    container_name: kowalski-postgres
    volumes:
      - ./db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=kowalski
      - POSTGRES_PASSWORD=kowalski
      - POSTGRES_DB=kowalski
    networks:
      - kowalski
    restart: always
  valkey:
    image: valkey/valkey
    container_name: kowalski-valkey
    networks:
      - kowalski
    restart: always
  prometheus:
    image: prom/prometheus:latest
    container_name: kowalski-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - kowalski
    restart: always
  grafana:
    image: grafana/grafana
    container_name: kowalski-grafana
    ports:
      - "3001:3000"
    networks:
      - kowalski
    volumes:
      - ./grafana:/var/lib/grafana
    restart: always
  #docs:
  #  build:
  #    context: ./docs
  #    dockerfile: Dockerfile
  #  container_name: kowalski-docs
  #  environment:
  #    - NODE_ENV=production
  #  networks:
  #    - kowalski
  #  restart: always

networks:
  kowalski: