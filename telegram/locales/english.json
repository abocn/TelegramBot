{
  "userNotFound": "User not found.",
  "botWelcome": "*Hello! I'm {botName}!*\nI was made with love by some nerds who really love programming!\n\n*By using {botName}, you affirm that you have read to and agree with the privacy policy (/privacy). This helps you understand where your data goes when using this bot.*\n\nAlso, you can use /help to see the bot commands!",
  "botHelp": "*Hey, I'm {botName}, a simple bot made entirely from scratch in Telegraf and Node.js by some nerds who really love programming.*\n\nCheck out the source code: [Click here to go to GitHub]({sourceLink})\n\nClick on the buttons below to see which commands you can use!\n",
  "botPrivacy": "Check out [this link]({botPrivacy}) to read the bot's privacy policy.",
  "botAbout": "*About the bot*\n\nThe bot base was originally created by [Lucas Gabriel (lucmsilva)](https://github.com/lucmsilva651), now maintained by several people.\n\nThe bot's purpose is to bring fun to your groups here on Telegram in a relaxed and simple way. The bot also features some very useful commands, which you can see using the help command (/help).\n\nSpecial thanks to @givfnz2 for his many contributions to the bot!\n\nSee the source code: [Click here to go to GitHub]({sourceLink})",
  "aboutBot": "About the bot",
  "varStrings": {
    "varYes": "Yes",
    "varNo": "No",
    "varTo": "to",
    "varIs": "is",
    "varWas": "was",
    "varNone": "None",
    "varUnknown": "Unknown",
    "varBack": "‚¨ÖÔ∏è Back",
    "varMore": "‚û°Ô∏è More",
    "varLess": "‚ûñ Less"
  },
  "unexpectedErr": "An unexpected error occurred: {error}",
  "errInvalidOption": "Whoops! Invalid option!",
  "commandDisabled": "üö´ This command is currently disabled for your account.\n\nYou can enable it in the web interface: {frontUrl}",
  "kickingMyself": "*Since you don't need me, I'll leave.*",
  "kickingMyselfErr": "Error leaving the chat.",
  "noPermission": "You don't have permission to run this command.",
  "privateOnly": "This command should only be used in private chats, not in groups.",
  "groupOnly": "This command should only be used in groups, not in private chats.",
  "botNameChanged": "*Bot name changed to* `{botName}`.",
  "botNameErr": "*Error changing bot name:*\n`{tgErr}`",
  "botDescChanged": "*Bot description changed to* `{botDesc}`.",
  "botDescErr": "*Error changing bot description:*\n`{tgErr}`",
  "gayAmount": "You are *{randomNum}%* gay!",
  "furryAmount": "You are *{randomNum}%* furry!",
  "randomNum": "*Generated number (0-10):* `{number}`.",
  "userInfo": "*User info*\n\n*Name:* `{userName}`\n*Username:* `{userHandle}`\n*User ID:* `{userId}`\n*Language:* `{userLang}`\n*Premium user:* `{userPremium}`",
  "chatInfo": "*Chat info*\n\n*Name:* `{chatName}`\n*Chat ID:* `{chatId}`\n*Handle:* `{chatHandle}`\n*Type:* `{chatType}`\n*Members:* `{chatMembersCount}`\n*Is a forum:* `{isForum}`",
  "funEmojiResult": "*You rolled {emoji} and got* `{value}`*!*\nYou don't know what that means? Me neither!",
  "gifErr": "*Something went wrong while sending the GIF. Please try again later.*\n\n{err}",
  "wiki": {
    "helpEntry": "üìö Wikipedia",
    "helpDesc": "üìö *Wikipedia*\n\n- /wiki `<search term>`: Search for a term on Wikipedia.",
    "noSearchTerm": "Please provide a search term.",
    "error": "Failed to fetch Wikipedia article.",
    "noContent": "No content found.",
    "showMore": "Show More (Page {current}/{total})",
    "previous": "‚¨ÖÔ∏è Previous",
    "next": "Next ‚û°Ô∏è (Page {current}/{total})",
    "endPage": "Page {current}/{total} (End)",
    "pageInfo": "Page {current} of {total}",
    "alreadyOnPage": "Already on page {current} of {total}",
    "contentUnavailable": "Content no longer available. Please search again.",
    "sentAsNewMessage": "Sent as new message",
    "updateFailed": "Failed to update content. Please try again.",
    "endReached": "You've reached the end of the article."
  },
  "quote": {
    "helpEntry": "üí≠ Quotes",
    "helpDesc": "üí≠ *Quotes*\n\n- /quote: Get a random inspirational quote.",
    "error": "*Failed to fetch a quote. Please try again later.*"
  },
  "lastFm": {
    "helpEntry": "üéµ Last.fm",
    "helpDesc": "üéµ *Last.fm*\n\n- /lt | /lmu | /last | /lfm: Shows the last song from your Last.fm profile + the number of plays.\n- /setuser `<user>`: Sets the user for the command above.",
    "noUser": "*Please provide a Last.fm username.*\nExample: `/setuser <username>`",
    "noUserSet": "*You haven't set your Last.fm username yet.*\nUse the command /setuser to set.\n\nExample: `/setuser <username>`",
    "noRecentTracks": "*No recent tracks found for Last.fm user* `{lastfmUser}`*.*",
    "userHasBeenSet": "*Your Last.fm username has been set to:* `{lastUser}`.",
    "listeningTo": "{lastfmUser} *{nowPlaying} listening to for the {plays}{suffix} time*:\n\n{trackName} by {artistName}",
    "apiErr": "*Error retrieving data for Last.fm user* {lastfmUser}.\n\n`{err}`"
  },
  "gitCurrentCommit": "*Current commit:* `{commitHash}`",
  "gitErrRetrievingCommit": "*Error retrieving commit:* {error}",
  "errorRetrievingStats": "*Error retrieving stats:* {error}",
  "kickedMyself": "*Left the chat successfully.*",
  "weatherStatus": {
    "provideLocation": "*Please provide a location.*",
    "invalidLocation": "*Invalid location. Try again.*",
    "resultMsg": "*Weather in {addressFirst}:*\n\n*Status:* `{getStatusEmoji(iconCode)} {wxPhraseLong}`\n*Temperature:* `{temperature} ¬∞{temperatureUnit}`\n*Feels like:* `{temperatureFeelsLike} ¬∞{temperatureUnit2}`\n*Humidity:* `{relativeHumidity}%`\n*Wind speed:* `{windSpeed} {speedUnit}`",
    "apiErr": "*An error occurred while retrieving the weather. Please try again later.*\n\n`{error}`",
    "apiKeyErr": "*An API key was not set by the bot owner. Please try again later.*"
  },
  "mainCommands": "‚ÑπÔ∏è Main Commands",
  "mainCommandsDesc": "‚ÑπÔ∏è *Main Commands*\n\n- /help: Show bot's help\n- /help verbose: Show all commands in list format\n- /start: Start the bot\n- /privacy: Read the bot's Privacy Policy\n- /settings: Show your user settings",
  "usefulCommands": "üõ†Ô∏è Useful Commands",
  "usefulCommandsDesc": "üõ†Ô∏è *Useful commands*\n\n- /chatinfo: Send information about the group\n- /userinfo: Send information about yourself\n- /d | /device `<model>`: Search for a device on GSMArena and show its specs.\n/codename | /whatis `<device codename>`: Shows what device is based on the codename. Example: `/codename begonia`\n- /weather | /clima `<city>`: See weather status for a specific location.\n- /modarchive | /tma `<module id>`: Download a module from The Mod Archive.\n- /http `<HTTP code>`: Send details about a specific HTTP code. Example: `/http 404`",
  "funnyCommands": "üòÇ Funny Commands",
  "funnyCommandsDesc": "üòÇ *Funny Commands*\n\n- /gay: Check if you are gay\n- /furry: Check if you are a furry\n- /random: Pick a random number between 0-10",
  "interactiveEmojis": "üé≤ Interactive Emojis",
  "interactiveEmojisDesc": "üé≤ *Interactive emojis*\n\n- /dice: Roll a dice\n- /idice: Infinitely roll a colored dice\n- /slot: Try to combine the figures!\n- /ball: Try to kick the ball into the goal!\n- /bowling: Try to hit the pins!\n- /dart: Try to hit the target!",
  "animalCommands": "üê± Animals",
  "animalCommandsDesc": "üê± *Animals*\n\n- /soggy | /soggycat `<1 | 2 | 3 | 4 | orig | thumb | sticker | alt>`: Sends the [Soggy cat meme](https://knowyourmeme.com/memes/soggy-cat)\n- /cat: Sends a random picture of a cat.\n- /fox: Sends a random picture of a fox.\n- /duck: Sends a random picture of a duck.\n- /dog: Sends a random picture of a dog.\n- /httpcat `<http code>`: Send cat memes from http.cat with your specified HTTP code. Example: `/httpcat 404`",
  "adminSettings": "‚öôÔ∏è Admin Settings",
  "adminSettingsDesc": "‚öôÔ∏è *Admin Settings*\n\n*Bot Management:*\n- /getbotstats: Get server statistics and system information\n- /getbotcommit: Get the current git commit hash of the bot\n- /setbotname `<name>`: Change the bot's display name\n- /setbotdesc `<description>`: Change the bot's description\n- /botkickme: Make the bot leave the current chat\n\n*AI Management:*\n- /queue: List current AI request queue\n- /qdel `<user_id>`: Clear queue items for a specific user\n- /qlimit `<user_id>` `<duration>`: Timeout user from AI commands\n- /setexec `<user_id>` `<duration>`: Set max execution time for user\n- /rlimit `<user_id>`: Remove all AI limits for user\n- /limits: List all current AI limits and timeouts",
  "ai": {
    "helpEntry": "‚ú® AI Commands",
    "helpDesc": "‚ú® *AI Commands*\n\n- /ask `<prompt>`: Ask a question to an AI model\n- /think `<prompt>`: Ask a thinking model about a question\n- /ai `<prompt>`: Ask your custom-set AI model a question\n- /aistop: Stop your current AI request\n- /aistats: Show your AI usage stats",
    "helpDescAdmin": "‚ú® *AI Commands*\n\n- /ask `<prompt>`: Ask a question to an AI model\n- /think `<prompt>`: Ask a thinking model about a question\n- /ai `<prompt>`: Ask your custom-set AI model a question\n- /aistop: Stop your current AI request\n- /aistats: Show your AI usage stats\n\n*Admin Commands:*\n- /queue: List current AI queue\n- /qdel `<user_id>`: Clear queue items for a user\n- /qlimit `<user_id>` `<duration>`: Timeout user from AI commands\n- /setexec `<user_id>` `<duration>`: Set max execution time for user\n- /rlimit `<user_id>`: Remove all AI limits for user\n- /limits: List all current AI limits",
    "disabled": "‚ú® AI features are currently disabled globally.",
    "disabledForUser": "‚ú® AI features are disabled for your account. You can enable them with the /settings command.",
    "pulling": "üîÑ Model {model} not found locally, pulling...",
    "askGenerating": "‚ú® Generating response with {model}...",
    "askNoMessage": "‚ú® You need to ask me a question!",
    "languageCode": "Language",
    "thinking": "`üß† Thinking...`",
    "finishedThinking": "`üß† Done thinking.`",
    "urlWarning": "\n\n‚ö†Ô∏è Note: The model cannot access or visit links!",
    "inQueue": "‚ÑπÔ∏è You are {position} in the queue.",
    "queueFull": "üö´ You already have too many requests in the queue. Please wait for them to finish.",
    "startingProcessing": "‚ú® Starting to process your request...",
    "systemPrompt": "You are called {botName}.\nCurrent Date/Time (UTC): {date}\n\n---\n\nUser message:\n{message}",
    "statusWaitingRender": "‚è≥ Streaming...",
    "statusRendering": "üñºÔ∏è Rendering...",
    "statusComplete": "‚úÖ Complete!",
    "modelHeader": "ü§ñ *{model}*      üå°Ô∏è  *{temperature}*      {status}",
    "noChatFound": "No chat found",
    "pulled": "‚úÖ Pulled {model} successfully, please retry the command.",
    "selectTemperature": "*Please select a temperature:*",
    "temperatureExplanation": "Temperature controls the randomness of the AI's responses. Lower values (e.g., 0.2) make the model more focused and deterministic, while higher values (e.g., 1.2 or above) make it more creative and random.",
    "queueEmpty": "‚úÖ The AI queue is currently empty.",
    "queueList": "üìã *AI Queue Status*\n\n{queueItems}\n\n*Total items:* {totalItems}",
    "queueItem": "‚Ä¢ User: {username} ({userId})\n  Model: {model}\n  Status: {status}\n",
    "queueCleared": "‚úÖ Cleared {count} queue items for user {userId}.",
    "queueClearError": "‚ùå Error clearing queue for user {userId}: {error}",
    "noQueueItems": "‚ÑπÔ∏è No queue items found for user {userId}.",
    "userTimedOut": "‚è±Ô∏è User {userId} has been timed out from AI commands until {timeoutEnd}.",
    "userTimeoutRemoved": "‚úÖ AI timeout removed for user {userId}.",
    "userTimeoutError": "‚ùå Error setting timeout for user {userId}: {error}",
    "invalidDuration": "‚ùå Invalid duration format. Use: 1m, 1h, 1d, 1w, etc.",
    "userExecTimeSet": "‚è±Ô∏è Max execution time set to {duration} for user {userId}.",
    "userExecTimeRemoved": "‚úÖ Max execution time limit removed for user {userId}.",
    "userExecTimeError": "‚ùå Error setting execution time for user {userId}: {error}",
    "invalidUserId": "‚ùå Invalid user ID. Please provide a valid Telegram user ID.",
    "userNotFound": "‚ùå User {userId} not found in database.",
    "userTimedOutFromAI": "‚è±Ô∏è You are currently timed out from AI commands until {timeoutEnd}.",
    "requestTooLong": "‚è±Ô∏è Your request is taking too long. It has been cancelled to prevent system overload.",
    "userLimitsRemoved": "‚úÖ All AI limits removed for user {userId}.",
    "userLimitRemoveError": "‚ùå Error removing limits for user {userId}: {error}",
    "limitsHeader": "üìã *Current AI Limits*",
    "noLimitsSet": "‚úÖ No AI limits are currently set.",
    "timeoutLimitsHeader": "*üîí Users with AI Timeouts:*",
    "timeoutLimitItem": "‚Ä¢ {displayName} ({userId}) - Until: {timeoutEnd}",
    "execLimitsHeader": "*‚è±Ô∏è Users with Execution Time Limits:*",
    "execLimitItem": "‚Ä¢ {displayName} ({userId}) - Max: {execTime}",
    "limitsListError": "‚ùå Error retrieving limits: {error}",
    "requestStopped": "üõë Your AI request has been stopped.",
    "requestRemovedFromQueue": "üõë Your AI request has been removed from the queue.",
    "noActiveRequest": "‚ÑπÔ∏è You don't have any active AI requests to stop.",
    "executionTimeoutReached": "\n\n‚è±Ô∏è Max execution time limit reached!",
    "stoppedCurrentAndCleared": "üõë Stopped current request and cleared {count} queued item(s) for user {userId}.",
    "stoppedCurrentRequestOnly": "üõë Stopped current request for user {userId} (no queued items found).",
    "stoppedCurrentAndClearedQueue": "üõë Stopped current request and cleared all queued items for user {userId}."
  },
  "maInvalidModule": "Please provide a valid module ID from The Mod Archive.\nExample: `/modarchive 81574`",
  "maDownloadError": "Error downloading the file. Check the module ID and try again.",
  "ytDownload": {
    "helpEntry": "üì∫ Video Download",
    "helpDesc": "üì∫ *Video Download*\n\n- /yt | /ytdl | /sdl | /dl | /video `<video link>`: Download a video from some platforms (e.g. YouTube, Instagram, Facebook, etc.).\n\n See [this link](https://github.com/yt-dlp/yt-dlp/blob/master/supportedsites.md) for more information and which services are supported.\n\n*Note: Telegram is currently limiting bot uploads to 50MB, which means that if the video you want to download is larger than 50MB, the quality will be reduced to try to upload it anyway. We're trying our best to work around or fix this problem.*",
    "downloadingVid": "‚¨áÔ∏è *Downloading video...*",
    "libNotFound": "*It seems that the yt-dlp executable does not exist on our server...\n\nIn that case, the problem is on our end! Please wait until we have noticed and solved the problem.*",
    "checkingSize": "üîé *Checking if the video exceeds the 50MB limit...*",
    "uploadingVid": "‚¨ÜÔ∏è *Uploading video...*",
    "msgDesc": "{userMention}*, there is your downloaded video.*",
    "downloadErr": "*Error during YT video download:*\n\n`{err}`",
    "uploadErr": "Error uploading file. Please try again later.",
    "uploadLimit": "*This video exceeds the 50 MB upload limit imposed by Telegram on our bot. Please try another video. We're doing our best to increase this limit.*",
    "sizeLimitWarn": "*This video had its quality reduced because it exceeded the 50MB limit for uploads imposed by Telegram.*",
    "noLink": "Please provide a link to a video to download.",
    "botDetection": "My server is being rate limited by the video provider! Please try again later, or ask the bot owner to add their cookies/account."
  },
  "settings": {
    "helpEntry": "üîß Settings",
    "helpDesc": "üîß *Settings*\n\n- /settings: Show your settings",
    "mainSettings": "üîß *Settings*\n\n- AI Enabled: {aiEnabled}\n- /ai Custom Model: {aiModel}\n- AI Temperature: {aiTemperature}\n- Total AI Requests: {aiRequests}\n- Total AI Characters Sent/Recieved: {aiCharacters}\n- Language: {languageCode}",
    "enabled": "Enabled",
    "disabled": "Disabled",
    "selectSetting": "Please select a setting to modify or view.",
    "ai": {
      "aiEnabled": "AI Enabled",
      "aiModel": "AI Model",
      "aiTemperature": "AI Temperature",
      "aiRequests": "Total AI Requests",
      "aiCharacters": "Total AI Characters Sent/Recieved",
      "languageCode": "Language",
      "aiEnabledSetTo": "AI Enabled set to {aiEnabled}",
      "aiModelSetTo": "AI Model set to {aiModel}",
      "aiTemperatureSetTo": "AI Temperature set to {aiTemperature}",
      "selectSeries": "*Please select a model series.*\n\nThis will be set as the default model for the /ai command.",
      "seriesDescription": "{seriesDescription}",
      "selectParameterSize": "*Please select a parameter size for {seriesLabel}*.",
      "parameterSizeExplanation": "Parameter size (e.g. 2B, 4B) refers to the number of parameters in the model. Larger models may be more capable but require more resources.",
      "modelSetTo": "Model set to {aiModel} ({parameterSize})",
      "selectTemperature": "*Please select a temperature:*",
      "temperatureExplanation": "Temperature controls the randomness of the AI's responses. Lower values (e.g., 0.2) make the model more focused and deterministic, while higher values (e.g., 1.2 or above) make it more creative and random.",
      "showThinking": "Show Model Thinking"
    },
    "selectLanguage": "*Please select a language:*",
    "languageCodeSetTo": "Language set to {languageCode}",
    "unknownAction": "Unknown action."
  },
  "botUpdated": "Bot updated with success.\n\n```{result}```",
  "catImgErr": "Sorry, but I couldn't get the cat photo you wanted.",
  "catGifErr": "Sorry, but I couldn't get the cat GIF you wanted.",
  "dogImgErr": "Sorry, but I couldn't get the dog photo you wanted.",
  "mlpInvalidCharacter": "Please provide a valid character name.",
  "mlpInvalidEpisode": "Please provide a valid episode number.",
  "foxApiErr": "An error occurred while fetching data from the API.\n\n`{error}`",
  "duckApiErr": "An error occurred while fetching data from the API.\n\n`{error}`",
  "httpCodes": {
    "invalidCode": "Please enter a valid HTTP code.",
    "fetchErr": "An error occurred while fetching the HTTP code.",
    "notFound": "HTTP code not found.",
    "resultMsg": "*HTTP Code*: {code}\n*Name*: `{message}`\n*Description*: {description}"
  },
  "ponyApi": {
    "helpEntry": "üê¥ My Little Pony",
    "helpDesc": "üê¥ *My Little Pony*\n\n- /mlp: Displays this help message.\n- /mlpchar `<character name>`: Shows specific information about a My Little Pony character. Example: `/mlpchar Twilight Sparkle`\n- /mlpep: Shows specific information about a My Little Pony episode. Example: `/mlpep 136`\n- /mlpcomic `<comic name>`: Shows specific information about a My Little Pony comic. Example: `/mlpcomic Nightmare Rarity`\n- /rpony | /randompony | /mlpart: Sends a random artwork made by the My Little Pony community.",
    "charRes": "*{name} (ID: {id})*\n\n*Alias:* `{alias}`\n*Sex:* `{sex}`\n*Residence:* `{residence}`\n*Occupation:* `{occupation}`\n*Kind:* `{kind}`\n\n*Fandom URL:*\n[{url}]({url})",
    "epRes": "*{name} (ID: {id})*\n\n*Season:* `{season}`\n*Episode:* `{episode}`\n*Overall Ep.:* `{overall}`\n*Release date:* `{airdate}`\n*Story by:* `{storyby}`\n*Written by:* `{writtenby}`\n*Storyboard:* `{storyboard}`\n\n*Fandom URL:*\n[{url}]({url})",
    "comicRes": "*{name} (ID: {id})*\n\n*Series:* `{series}`\n*Writer:* `{writer}`\n*Artist:* `{artist}`\n*Colorist:* `{colorist}`\n*Letterer:* `{letterer}`\n*Editor:* `{editor}`\n\n*Fandom URL:*\n[{url}]({url})",
    "noCharName": "Please provide the character's name.",
    "noCharFound": "No character found.",
    "noEpisodeNum": "Please provide the episode's number.",
    "noEpisodeFound": "No episode found.",
    "noComicName": "Please provide the comic's name.",
    "noComicFound": "No comic found.",
    "searching": "Searching for a character‚Ä¶",
    "apiErr": "An error occurred while fetching data from the API.\n\n`{error}`"
  },
  "codenameCheck": {
    "noCodename": "Please provide a codename to search.",
    "invalidCodename": "Invalid codename.",
    "notFound": "Phone not found.",
    "resultMsg": "*Name:* `{name}`\n*Brand:* `{brand}`\n*Model:* `{model}`\n*Codename:* `{codename}`",
    "apiErr": "An error occurred while fetching data from the API.\n\n`{err}`"
  },
  "chatNotFound": "Chat not found.",
  "noFileProvided": "Please provide a file to send.",
  "gsmarenaProvidePhoneName": "Please provide the phone name.",
  "gsmarenaSearchingFor": "Searching for `{phone}`...",
  "gsmarenaNoPhonesFound": "No phones found for `{phone}`.",
  "gsmarenaNoPhonesFoundBoth": "No phones found for `{name}` and `{phone}`.",
  "gsmarenaSelectDevice": "Please select your device:",
  "gsmarenaNotAllowed": "you are not allowed to interact with this.",
  "gsmarenaInvalidOrExpired": "Whoops, invalid or expired option. Please try again.",
  "gsmarenaDeviceDetails": "these are the details of your device:",
  "gsmarenaErrorFetchingDetails": "Error fetching phone details.",
  "info": {
    "ping": "Pong!",
    "pinging": "Pinging...",
    "pong": "Pong in {ms}ms.",
    "botInfo": "Kowalski is a multipurpose bot with a variety of features, including AI, moderation, and more.",
    "credits": "Kowalski was created by ihatenodejs/Aidan, with contributions from the open-source community. It is licensed under the Unlicense license."
  },
  "aiStats": {
    "header": "‚ú® *Your AI Usage Stats*",
    "requests": "*Total AI Requests:* {aiRequests}",
    "characters": "*Total AI Characters:* {aiCharacters}\n_That's around {bookCount} books of text!_"
  },
  "twoFactor": {
    "helpEntry": "üîí 2FA",
    "helpDesc": "üîí *2FA*\n\n- /2fa: Show your 2FA settings",
    "codeMessage": "üîí *{botName} 2FA*\n\nYour 2FA code is: `{code}`"
  }
}
