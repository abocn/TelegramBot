{
  "botWelcome": "*Hello! I'm {botName}!*\nI was made with love by some nerds who really love programming!\n\n*By using {botName}, you affirm that you have read to and agree with the privacy policy (/privacy). This helps you understand where your data goes when using this bot.*\n\nAlso, you can use /help to see the bot commands!",
  "botHelp": "*Hey, I'm {botName}, a simple bot made entirely from scratch in Telegraf and Node.js by some nerds who really love programming.*\n\nClick on the buttons below to see which commands you can use!\n",
  "botPrivacy": "Check out [this link](https://blog.lucmsilva.com/posts/lynx-privacy-policy) to read the bot's privacy policy.",
  "botAbout": "*About the bot*\n\nThe bot base was originally created by [Lucas Gabriel (lucmsilva)](https://github.com/lucmsilva651), now maintained by several people.\n\nThe bot's purpose is to bring fun to your groups here on Telegram in a relaxed and simple way. The bot also features some very useful commands, which you can see using the help command (/help).\n\nSpecial thanks to @givfnz2 for his many contributions to the bot!\n\nSee the source code: [Click here to go to GitHub]({sourceLink})",
  "aboutBot": "About the bot",
  "varStrings": {
    "varYes": "Yes",
    "varNo": "No",
    "varTo": "to",
    "varIs": "is",
    "varWas": "was",
    "varNone": "None",
    "varUnknown": "Unknown",
    "varBack": "Back"
  },
  "unexpectedErr": "Some unexpected error occurred during a bot action. Please report it to the developers.",
  "errInvalidOption": "Whoops! Invalid option!",
  "kickingMyself": "*Since you don't need me, I'll leave.*",
  "kickingMyselfErr": "Error leaving the chat.",
  "noPermission": "You don't have permission to run this command.",
  "privateOnly": "This command should only be used in private chats, not in groups.",
  "groupOnly": "This command should only be used in groups, not in private chats.",
  "botNameChanged": "*Bot name changed to* `{botName}`.",
  "botNameErr": "*Error changing bot name:*\n`{tgErr}`",
  "botDescChanged": "*Bot description changed to* `{botDesc}`.",
  "botDescErr": "*Error changing bot description:*\n`{tgErr}`",
  "gayAmount": "You are *{randomNum}%* gay!",
  "furryAmount": "You are *{randomNum}%* furry!",
  "randomNum": "*Generated number (0-10):* `{number}`.",
  "userInfo": "*User info*\n\n*Name:* `{userName}`\n*Username:* `{userHandle}`\n*User ID:* `{userId}`\n*Language:* `{userLang}`\n*Premium user:* `{userPremium}`",
  "chatInfo": "*Chat info*\n\n*Name:* `{chatName}`\n*Chat ID:* `{chatId}`\n*Handle:* `{chatHandle}`\n*Type:* `{chatType}`\n*Members:* `{chatMembersCount}`\n*Is a forum:* `{isForum}`",
  "funEmojiResult": "*You rolled {emoji} and got* `{value}`*!*\nYou don't know what that means? Me neither!",
  "gifErr": "*Something went wrong while sending the GIF. Please try again later.*\n\n{err}",
  "lastFm": {
    "helpEntry": "Last.fm",
    "helpDesc": "*Last.fm*\n\n- /lt | /lmu | /last | /lfm: Shows the last song from your Last.fm profile + the number of plays.\n- /setuser `<user>`: Sets the user for the command above.",
    "noUser": "*Please provide a Last.fm username.*\nExample: `/setuser <username>`",
    "noUserSet": "*You haven't set your Last.fm username yet.*\nUse the command /setuser to set.\n\nExample: `/setuser <username>`",
    "noRecentTracks": "*No recent tracks found for Last.fm user* `{lastfmUser}`*.*",
    "userHasBeenSet": "*Your Last.fm username has been set to:* `{lastUser}`.",
    "listeningTo": "{lastfmUser} *{nowPlaying} listening {playCount}*:\n\n{trackName} by {artistName}",
    "playCount": "to, for the {plays}th time",
    "apiErr": "*Error retrieving data for Last.fm user* {lastfmUser}.\n\n`{err}`"
  },
  "gitCurrentCommit": "*Current commit:* `{commitHash}`",
  "gitErrRetrievingCommit": "*Error retrieving commit:* {error}",
  "weatherStatus": {
    "provideLocation": "*Please provide a location.*",
    "invalidLocation": "*Invalid location. Try again.*",
    "resultMsg": "*Weather in {addressFirst}:*\n\n*Status:* `{getStatusEmoji(iconCode)} {wxPhraseLong}`\n*Temperature:* `{temperature} °{temperatureUnit}`\n*Feels like:* `{temperatureFeelsLike} °{temperatureUnit2}`\n*Humidity:* `{relativeHumidity}%`\n*Wind speed:* `{windSpeed} {speedUnit}`",
    "apiErr": "*An error occurred while retrieving the weather. Please try again later.*\n\n`{error}`"
  },
  "mainCommands": "Main commands",
  "mainCommandsDesc": "*Main commands*\n\n- /help: Show bot's help\n- /start: Start the bot\n- /privacy: Read the bot's Privacy Policy",
  "usefulCommands": "Useful commands",
  "usefulCommandsDesc": "*Useful commands*\n\n- /chatinfo: Send information about the group\n- /userinfo: Send information about yourself\n- /d | /device `<model>`: Search for a device on GSMArena and show its specs.\n/codename `<device codename>`: Shows what device is based on the codename. Example: `/codename begonia`\n- /weather | /clima `<city>`: See weather status for a specific location.\n- /modarchive | /tma `<module id>`: Download a module from The Mod Archive.\n- /wiki `<wiki page>` (WIP): Displays content from a Wikipedia page, converting some things to a more familiar format on Telegram.\n- /http `<HTTP code>`: Send details about a specific HTTP code. Example: `/http 404`",
  "funnyCommands": "Funny commands",
  "funnyCommandsDesc": "*Funny commands*\n\n- /gay: Check if you are gay\n- /furry: Check if you are a furry\n- /random: Pick a random number between 0-10",
  "interactiveEmojis": "Interactive emojis",
  "interactiveEmojisDesc": "*Interactive emojis*\n\n- /dice: Roll a dice\n- /idice: Infinitely roll a colored dice\n- /slot: Try to combine the figures!\n- /ball: Try to kick the ball into the goal!\n- /bowling: Try to hit the pins!\n- /dart: Try to hit the target!",
  "animalCommands": "Animals",
  "animalCommandsDesc": "*Animals*\n\n- /soggy | /soggycat `<1 | 2 | 3 | 4 | orig | thumb | sticker | alt>`: Sends the [Soggy cat meme](https://knowyourmeme.com/memes/soggy-cat)\n - /cat `<tags>`: Sends a random picture of a cat. You can specify some tags, separating each by a comma. Example: `/cat orange, cute`\n- /dog: Sends a random picture of a dog.\n- /httpcat `<http code>`: Send cat memes from http.cat with your specified HTTP code. Example: `/httpcat 404`",
  "maInvalidModule": "Please provide a valid module ID from The Mod Archive.\nExample: `/modarchive 81574`",
  "maDownloadError": "Error downloading the file. Check the module ID and try again.",
  "ytDownload": {
    "helpEntry": "Video download",
    "helpDesc": "*Video download*\n\n- /yt | /ytdl | /sdl | /dl | /video `<video link>`: Download a video from some platforms (e.g. YouTube, Instagram, Facebook, etc.).\n\n See [this link](https://github.com/yt-dlp/yt-dlp/blob/master/supportedsites.md) for more information and which services are supported.\n\n*Note: Telegram is currently limiting bot uploads to 50MB, which means that if the video you want to download is larger than 50MB, the quality will be reduced to try to upload it anyway. We're trying our best to work around or fix this problem.*",
    "downloadingVid": "*Downloading video...*",
    "libNotFound": "*It seems that the yt-dlp executable does not exist on our server...\n\nIn that case, the problem is on our end! Please wait until we have noticed and solved the problem.*",
    "checkingSize": "*Checking if the video exceeds the 50MB limit...*",
    "uploadingVid": "*Uploading video...*",
    "msgDesc": "{userMention}*, there is your downloaded video.*",
    "downloadErr": "*Error during YT video download:*\n\n`{err}`",
    "uploadErr": "Error uploading file. Please try again later.\n\n{error}",
    "uploadLimit": "*This video exceeds the 50 MB upload limit imposed by Telegram on our bot. Please try another video. We're doing our best to increase this limit.*",
    "sizeLimitWarn": "*This video had its quality reduced because it exceeded the 50MB limit for uploads imposed by Telegram.*",
    "noLink": "Please provide a link to a video to download."
  },
  "botUpdated": "Bot updated with success.\n\n```{result}```",
  "errorUpdatingBot": "Error updating bot\n\n{error}",
  "catImgErr": "Sorry, but I couldn't get the cat photo you wanted.",
  "catGifErr": "Sorry, but I couldn't get the cat GIF you wanted.",
  "quoteResult": "Here is a random quote for you:",
  "quoteErr": "Sorry, but something went wrong while displaying the quote.",
  "dogImgErr": "Sorry, but I couldn't get the dog photo you wanted.",
  "foxApiErr": "An error occurred while fetching data from the API.\n\n`{error}`",
  "duckApiErr": "An error occurred while fetching data from the API.\n\n`{error}`",
  "httpCodes": {
    "invalidCode": "Please enter a valid HTTP code.",
    "fetchErr": "An error occurred while fetching the HTTP code.",
    "notFound": "HTTP code not found.",
    "resultMsg": "*HTTP Code*: {code}\n*Name*: `{message}`\n*Description*: {description}"
  },
  "ponyApi": {
    "helpEntry": "My Little Pony",
    "helpDesc": "*My Little Pony*\n\n- /mlp: Displays this help message.\n- /mlpchar `<character name>`: Shows specific information about a My Little Pony character. Example: `/mlpchar Twilight Sparkle`\n- /mlpep: Shows specific information about a My Little Pony episode. Example: `/mlpep 136`\n- /mlpcomic `<comic name>`: Shows specific information about a My Little Pony comic. Example: `/mlpcomic Nightmare Rarity`\n- /rpony | /randompony: Sends a random artwork made by the My Little Pony community.",
    "charRes": "*MLP Character Information for* \"`{input}`\"*:*\n\n*Name:* `{name}`\n*Alias*: `{alias}`\n*Fandom URL:* [{url}]({url})\n*Sex:* `{sex}`\n*Residence:* `{residence}`\n*Occupation:* `{occupation}`\n*Kind:* `{kind}`",
    "epRes": "*MLP Episode Information for* \"`{input}`\"*:*\n\n*Name:* `{name}`\n*Fandom URL:* [{url}]({url})\n*Season:* `{season}`\n*Episode:* `{episode}`\n*Overall Ep.:* `{overall}`\n*Release date:* `{airdate}`\n*Story by:* `{storyby}`\n*Written by:* `{writtenby}`\n*Storyboard:* `{storyboard}`",
    "comicRes": "*MLP Comic Information for* \"`{input}`\"*:*\n\n*Name:* `{name}`\n*Fandom URL:* [{url}]({url})\n*Series:* `{series}`\n*Writer:* `{writer}`\n*Artist:* `{artist}`\n*Colorist:* `{colorist}`\n*Letterer:* `{letterer}`\n*Editor:* `{editor}`",
    "noCharName": "Please provide the character's name.",
    "noCharFound": "No character found.",
    "noEpisodeNum": "Please provide the episode's number.",
    "noEpisodeFound": "No episode found.",
    "noComicName": "Please provide the comic's name.",
    "noComicFound": "No comic found.",
    "apiErr": "An error occurred while fetching data from the API.\n\n`{error}`"
  },
  "codenameCheck": {
    "noCodename": "Please provide a codename to search.",
    "invalidCodename": "Invalid codename.",
    "notFound": "Phone not found.",
    "resultMsg": "*Name:* `{name}`\n*Brand:* `{brand}`\n*Model:* `{model}`\n*Codename:* `{codename}`",
    "apiErr": "An error occurred while fetching data from the API.\n\n`{err}`"
  }
}